scalar Long
scalar Json

type UserPlayer {
  id: ID
  firstName: String
  lastName: String
  userName: String
  email: String
  phone: String
  gender: Gender
  dateOfBirth: String
  country: String
  city: String,
  specialization: Specialization
  battingStyle: BattingStyle
  bowlingStyle: BowlingStyle
  createdOn: String
  updatedOn: String
}

type Ball {
  id: ID!,
  wicketKeeper: UserPlayer
  striker: UserPlayer
}

type Team {
  id: ID!,
  name: String
  createdOn: String,
  updatedOn: String,
  players: [TeamPlayer]
}

type TeamPlayer {
  id: ID!,
  player: UserPlayer,
  teamRole: TeamPlayerRole
}

type SquadPlayer {
  matchId: Long,
  teamId: Long,
  player: UserPlayer
}

type Match {
  id: ID!,
  name: String,
  tossDecision: TossDecision,
  type: MatchType,
  matchDate: String,
  overs: Int,
  city: String,
  country: String,
  tournament: Tournament,
  team1: Team,
  team2: Team,
  status: MatchStatus,
  ground: Ground
  tossWinnerId: Long
  squad1Players: [SquadPlayer]
  squad2Players: [SquadPlayer]
  innings: [Inning]
  powerplay: [PowerPlay]
}

type Inning {
  id: ID,
  matchId: Long,
  team: Team,
  startTime: String,
  endTime: String,
  inningNumber: Int,
  score: Int,
  wickets: Int,
  target: Int
  extras: Int,
  numBalls: Int,
  status: InningStatus
}

type Tournament {
  name: String,
  city: String,
  status: TournamentStatus,
  country: String
}

type RecordBallResponse {
  id: ID!
  strikerId: Long,
  nonStrikerId: Long,
  success: Boolean,
  isNextFreeHit: Boolean
  nextBallNumber: Boolean
}

type PowerPlay {
  start: Long!,
  end: Long!
}

type Ground {
  id: ID!
  name: String,
  lat: String,
  lon: String,
  address: String
  createdOn: String,
  updatedOn: String
}

input UserPlayerInput {
  id: Long
  firstName: String
  lastName: String
  userName: String
  email: String
  phone: String
  gender: Gender
  dateOfBirth: String
  country: String
  city: String,
  specialization: Specialization
  battingStyle: BattingStyle
  bowlingStyle: BowlingStyle
  createdOn: String
  updatedOn: String
}

input BallInput {
  ballType: BallType!
  wicketMeta: WicketInfo
  inningId: Long!
  bowlerId: Long!
  strikerId: Long!
  nonStrikerId: Long!
  wicketKeeperId: Long!
  runs: Int!
  ballNumber: Int!
  comment: String
  isFreeHit: Boolean = false
}

input WicketInfo {
  outPlayerId: Long!
  wicketType: WicketType!
  fielderId: Long
}

input TournamentInput {
  name: String,
  city: String,
  country: String
  status: TournamentStatus
}

input MatchInput {
  name: String!,
  overs: Int!,
  city: String,
  country: String,
  tournamentId: Long,
  team1Id: Long!,
  team2Id: Long!,
  status: MatchStatus = UPCOMING,
  groundId: Long!
  tossWinnerId: Long
}

input TeamInput {
  name: String
}

input GroundInput {
  name: String,
  lat: String,
  lon: String,
  address: String!
}

input AddPlayerToTeamInput {
  teamId: Long!,
  playerId: Long!,
  teamPlayerRole: TeamPlayerRole
}

input AddSquadToMatchInput {
  teamId: Long!,
  matchId: Long!,
  playerIds: [Long]!
}

enum Gender {
  MALE,
  FEMALE,
  OTHER
}

enum Specialization {
  TOP_ORDER_BATSMAN
  MIDDLE_ORDER_BATSMAN
  FAST_BOWLER
  SPIN_BOWLER
}

enum TossDecision {
  BAT_FIRST,
  BOWL_FIRST
}

enum BattingStyle {
  LEFT
  RIGHT
}

enum BowlingStyle {
  LEFT
  RIGHT
}

enum MatchType {
  T20
  ONE_DAY
  TEST
  CUSTOM
}

enum TournamentStatus {
  UPCOMING,
  IN_PROGRESS,
  COMPLETED
}

enum TeamPlayerRole {
  CAPTAIN,
  VICE_CAPTAIN
}

enum MatchStatus {
  UPCOMING,
  IN_PROGRESS,
  COMPLETED
}

enum BallType {
  NO_BALL,
  NO_BALL_SIX,
  NO_BALL_FOUR,
  NO_BALL_LEG_BYE,
  NO_BALL_BYE,
  WIDE,
  WIDE_BYE,
  FOUR,
  SIX,
  RUN,
  LEG_BYE,
  WICKET
}

enum WicketType {
  BOWLED,
  CATCH,
  CAUGHT_AND_BOWLED,
  STUMP,
  STUMP_AND_WIDE,
  RUN_OUT,
  RUN_OUT_AND_WIDE,
  RUN_OUT_AND_NO_BALL,
  TIMED_OUT,
  OBSTRUCTING_THE_FIELD,
  OBSTRUCTING_THE_FIELD_AND_WIDE,
  OBSTRUCTING_THE_FIELD_AND_NO_BALL,
  CAUGHT_BEHIND,
  LEG_BY_WICKET
}

enum InningStatus {
  IN_PROGRESS
  COMPLETED
}

type Query {
  getPlayerById(id: ID!): UserPlayer
  getGroundById(id: ID!): Ground
  getTeamById(id: ID!): Team
  getBallById(id: ID!): Ball
  getFormConfig(formName: String!): Json
}

type Mutation {
  createPlayer(player: UserPlayerInput!): UserPlayer
  updatePlayer(player: UserPlayerInput!): UserPlayer,
  createTournament(tournament: TournamentInput!): Tournament
  createMatch(match: MatchInput!): Match
  createTeam(team: TeamInput): Team
  createGround(ground: GroundInput): Ground
  recordBall(ball: BallInput): RecordBallResponse
  addPlayerToTeam(addPlayerToTeamInput: AddPlayerToTeamInput): Team
  addSquadToMatch(addSquadInput: AddSquadToMatchInput): Match
  recordToss(matchId: Long, tossWinnerId: Long, tossDecision: TossDecision): Match
  createMatchInnings(matchId: Long!, teamId: Long!, inningNumber: Int!): Match
}
